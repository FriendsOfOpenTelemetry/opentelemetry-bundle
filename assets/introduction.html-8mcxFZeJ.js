import{_ as a,c as o,b as s,a as i,d as t,e as r,f as l,r as c,o as d}from"./app-DUZetGeb.js";const p={};function u(m,e){const n=c("RouteLink");return d(),o("div",null,[e[3]||(e[3]=s(`<h1 id="introduction" tabindex="-1"><a class="header-anchor" href="#introduction"><span>Introduction</span></a></h1><p>Instrumentation consist of allowing the OpenTelemetry SDK to automatically generate telemetry data for your Symfony application.</p><p>A Symfony application can use several components provided by Symfony such as the console, the cache etc.</p><p>Each component require a specific instrumentation to be able to generate telemetry data. Some of them require decoration to be instrumented, others require to listen to Symfony events or extra configuration.</p><blockquote><p><strong>Note</strong>: The instrumentation is still in alpha, only generate traces and may not cover all the use cases. Please open a new issue or a pull request if you find an uncovered use case.</p></blockquote><p>Here is how each component is &quot;hooked&quot; to allow instrumentation:</p><ul><li>Cache: Cache services are instrumented by decorating services tagged with <code>cache.taggable</code> and <code>cache.pool</code> tags.</li><li>Console: Commands are instrumented by registering an event subscriber on <code>ConsoleEvents</code> events.</li><li>Doctrine: A middleware is registered to wrap DBAL methods such as <code>prepare</code>, <code>query</code>, <code>beginTransaction</code>, <code>commit</code>, <code>rollBack</code> etc.</li><li>Http Client: The client services are instrumented by decorated services tagged with <code>http_client.transport</code> or <code>http_client</code> tags.</li><li>Http Kernel: Controllers are instrumented by registering an event subscriber on <code>KernelEvents</code> events.</li><li>Mailer: The mailer services are instrumented by decorating services tagged with <code>mailer.mailer</code> tag. <ul><li>The transport is also instrumented by decorating services tagged with <code>mailer.transports</code> and <code>mailer.default_transports</code> tag.</li></ul></li><li>Messenger: A message bus can be instrumented by configuring a new middleware called <code>open_telemetry_tracer</code>. <ul><li>The transport can also be instrumented by wrapping the DSN string with <code>trace()</code>.</li></ul></li><li>Twig: Rendering is instrumented by registering a Twig extension that adds a <code>ProfilerNodeVisitor</code> to the Twig environment.</li></ul><p>Each component comes with a configuration block that allows to enable or disable the instrumentation and configure it.</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">open_telemetry</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">instrumentation</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">&lt;component_name&gt;</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token key atrule">tracing</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></span>
<span class="line">        <span class="token key atrule">tracer</span><span class="token punctuation">:</span> <span class="token string">&#39;open_telemetry.traces.tracers.main&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>It is important to understand that the current implementation rely on entrypoint components, which create root spans to allow &quot;secondary&quot; components to attach their spans to it. A secondary component that does not have a root span will create orphan traces and mess with your obsa, as they won&#39;t be attached to any root span.</p><p>In a Symfony application the entrypoint components are the <code>HttpKernel</code>, the <code>Console</code> and <code>Messenger</code>.</p><ul><li>The <code>HttpKernel</code> is the entrypoint for requests.</li><li>The <code>Console</code> is the entrypoint for commands.</li><li>The <code>Messenger</code> is the entrypoint for messages.</li></ul><p>Those entrypoint components can be configured in two ways:</p><ul><li>Automatically: The bundle will automatically instrument all registered routes and commands.</li><li>Manually: Only instrument routes and commands using the <code>#[Traceable]</code> attribute.</li></ul>`,14)),i("p",null,[e[1]||(e[1]=t("For further information on tracing instrumentation, please refer to the ")),r(n,{to:"/instrumentation/traces.html"},{default:l(()=>e[0]||(e[0]=[t("Traces")])),_:1}),e[2]||(e[2]=t(" documentation."))])])}const y=a(p,[["render",u],["__file","introduction.html.vue"]]),g=JSON.parse('{"path":"/instrumentation/introduction.html","title":"Introduction","lang":"en-US","frontmatter":{},"headers":[],"filePathRelative":"instrumentation/introduction.md","git":{"createdTime":1711386927000,"updatedTime":1737155357000,"contributors":[{"name":"Gaël Reyrol","username":"Gaël Reyrol","email":"me@gaelreyrol.dev","commits":1,"url":"https://github.com/Gaël Reyrol"},{"name":"Gaël Reyrol","username":"Gaël Reyrol","email":"greyrol@kiosc.com","commits":1,"url":"https://github.com/Gaël Reyrol"}]}}');export{y as comp,g as data};
