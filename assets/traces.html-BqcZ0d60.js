import{_ as s,r as o,o as p,c,a as e,b as n,d as l,e as a}from"./app-BgzC8iiR.js";const r={},i=a(`<h1 id="traces" tabindex="-1"><a class="header-anchor" href="#traces"><span>Traces</span></a></h1><p>TBD</p><h2 id="configuration" tabindex="-1"><a class="header-anchor" href="#configuration"><span>Configuration</span></a></h2><p>To configure traces, you need to define a <code>tracer</code>, a <code>provider</code>, a <code>processor</code> and an <code>exporter</code>.</p><p>Here is a basic example:</p><div class="language-yaml" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">open_telemetry</span><span class="token punctuation">:</span>
  <span class="token key atrule">traces</span><span class="token punctuation">:</span>
    <span class="token key atrule">tracers</span><span class="token punctuation">:</span>
      <span class="token key atrule">main</span><span class="token punctuation">:</span>
        <span class="token comment"># A tracer must refer a provider using the service id pattern \`open_telemetry.traces.providers.&lt;provider_name&gt;\`.</span>
        <span class="token key atrule">provider</span><span class="token punctuation">:</span> <span class="token string">&#39;open_telemetry.traces.providers.default&#39;</span>
    <span class="token key atrule">providers</span><span class="token punctuation">:</span>
      <span class="token key atrule">default</span><span class="token punctuation">:</span>
        <span class="token key atrule">type</span><span class="token punctuation">:</span> default
        <span class="token key atrule">sampler</span><span class="token punctuation">:</span> always_on
        <span class="token key atrule">processors</span><span class="token punctuation">:</span>
          <span class="token comment"># A provider must refer one or more processor using the service id pattern \`open_telemetry.traces.processors.&lt;processor_name&gt;\`.</span>
          <span class="token punctuation">-</span> <span class="token string">&#39;open_telemetry.traces.processors.simple&#39;</span>
    <span class="token key atrule">processors</span><span class="token punctuation">:</span>
      <span class="token key atrule">simple</span><span class="token punctuation">:</span>
        <span class="token key atrule">type</span><span class="token punctuation">:</span> simple
        <span class="token comment"># A processor must refer an exporter using the service id pattern \`open_telemetry.traces.exporters.&lt;exporter_name&gt;\`.</span>
        <span class="token key atrule">exporter</span><span class="token punctuation">:</span> <span class="token string">&#39;open_telemetry.traces.exporters.otlp&#39;</span>
    <span class="token key atrule">exporters</span><span class="token punctuation">:</span>
      <span class="token key atrule">otlp</span><span class="token punctuation">:</span>
        <span class="token key atrule">dsn</span><span class="token punctuation">:</span> http+otlp<span class="token punctuation">:</span>//localhost
</code></pre></div><p>A service with the following id <code>open_telemetry.traces.tracers.default_tracer</code> is automatically defined and reference the first tracer registered in your configuration. This <code>default_tracer</code> will be injected in your services using the <code>OpenTelemetry\\API\\Trace\\TracerInterface</code> interface.</p><p>An exporter DSN is a string that follows the following pattern: <code>?transport+exporter://[user:password@]host[:port][/path][?query]</code>.</p><p>A DSN starts with a transport and an exporter separated by a <code>+</code> character. The transport might be optional depending on the exporter.</p><p>Here is table list of the available transport and exporter for traces:</p><table><thead><tr><th>Transport</th><th>Exporter</th><th>Description</th><th>Example</th><th>Default</th></tr></thead><tbody><tr><td>http(s)</td><td>otlp</td><td>OpenTelemetry exporter using HTTP protocol (over TLS)</td><td>http+otlp://localhost:4318/v1/traces</td><td>N/A</td></tr><tr><td>grpc(s)</td><td>otlp</td><td>OpenTelemetry exporter using gRPC protocol (over TLS)</td><td>grpc+otlp://localhost:4317</td><td>N/A</td></tr><tr><td>http(s)</td><td>zipkin</td><td>Zipkin exporter using HTTP protocol (over TLS)</td><td>http+zipkin://localhost:9411/api/v2/spans</td><td>N/A</td></tr><tr><td>empty</td><td>in-memory</td><td>In-memory exporter for testing purpose</td><td>in-memory://default</td><td>N/A</td></tr><tr><td>stream</td><td>console</td><td>Console exporter for testing purpose using a stream resource</td><td>stream+console://default</td><td>php://stdout</td></tr></tbody></table><p>Note: The <code>stream+console</code> DSN is the only DSN than can refer to a stream resource using the <code>path</code> block. For example: <code>stream+console://default/file.log</code>.</p>`,12),u={href:"https://opentelemetry.io/docs/languages/php/instrumentation/#traces",target:"_blank",rel:"noopener noreferrer"},d=a(`<h2 id="components" tabindex="-1"><a class="header-anchor" href="#components"><span>Components</span></a></h2><p>Here is the list of the available Symfony components that can be traced:</p><ul><li>Cache (Alpha)</li><li>Console (Alpha)</li><li>Doctrine (Alpha)</li><li>Http Client (Alpha)</li><li>Http Kernel (Alpha)</li><li>Mailer (Alpha)</li><li>Messenger (Alpha)</li><li>Twig (Alpha)</li></ul><p>Each component can be configured using the following configuration block:</p><div class="language-yaml" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">open_telemetry</span><span class="token punctuation">:</span>
  <span class="token key atrule">instrumentation</span><span class="token punctuation">:</span>
    <span class="token key atrule">&lt;component_name&gt;</span><span class="token punctuation">:</span>
      <span class="token key atrule">tracing</span><span class="token punctuation">:</span>
        <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># Default: false</span>
        <span class="token key atrule">tracer</span><span class="token punctuation">:</span> <span class="token string">&#39;open_telemetry.traces.tracers.main&#39;</span> <span class="token comment"># Default: &#39;open_telemetry.traces.tracers.default_tracer&#39;</span>
      <span class="token comment"># ...</span>
</code></pre></div><p>Once you enabled an instrumentation, it will automatically create spans, based on its tracer, provider, processor and exporter.</p><p>With the <code>Console</code> and <code>HttpKernel</code> entrypoint components, you can also define a <code>type</code> configuration block:</p><div class="language-yaml" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">open_telemetry</span><span class="token punctuation">:</span>
  <span class="token key atrule">instrumentation</span><span class="token punctuation">:</span>
    <span class="token key atrule">console</span><span class="token punctuation">:</span>
      <span class="token key atrule">type</span><span class="token punctuation">:</span> attribute <span class="token comment"># Default: auto</span>
      <span class="token key atrule">tracing</span><span class="token punctuation">:</span>
      <span class="token comment"># ...</span>
</code></pre></div><p>The <code>type</code> option allows you to define how the instrumentation is done. The following options are available:</p><ul><li><code>auto</code>: Automatically instrument all registered routes and commands.</li><li><code>attribute</code>: Only instrument routes and commands using the <code>#[Traceable]</code> attribute.</li></ul><p>Here is an example of how to use the <code>#[Traceable]</code> attribute:</p><div class="language-php" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">FriendsOfOpenTelemetry<span class="token punctuation">\\</span>OpenTelemetryBundle<span class="token punctuation">\\</span>Attribute<span class="token punctuation">\\</span>Traceable</span><span class="token punctuation">;</span>

<span class="token attribute"><span class="token delimiter punctuation">#[</span><span class="token attribute-content"><span class="token attribute-class-name class-name">Traceable</span></span><span class="token delimiter punctuation">]</span></span>
<span class="token attribute"><span class="token delimiter punctuation">#[</span><span class="token attribute-content"><span class="token attribute-class-name class-name">AsCommand</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;test&#39;</span><span class="token punctuation">)</span></span><span class="token delimiter punctuation">]</span></span>
<span class="token keyword">class</span> <span class="token class-name-definition class-name">TestCommand</span> <span class="token keyword">extends</span> <span class="token class-name">Command</span>
<span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>

<span class="token attribute"><span class="token delimiter punctuation">#[</span><span class="token attribute-content"><span class="token attribute-class-name class-name">Traceable</span></span><span class="token delimiter punctuation">]</span></span>
<span class="token keyword">class</span> <span class="token class-name-definition class-name">TestController</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractController</span>
<span class="token punctuation">{</span>
    <span class="token attribute"><span class="token delimiter punctuation">#[</span><span class="token attribute-content"><span class="token attribute-class-name class-name">Traceable</span></span><span class="token delimiter punctuation">]</span></span>
    <span class="token attribute"><span class="token delimiter punctuation">#[</span><span class="token attribute-content"><span class="token attribute-class-name class-name">Route</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/test&#39;</span><span class="token punctuation">,</span> <span class="token attribute-class-name class-name">name</span><span class="token punctuation">:</span> <span class="token string single-quoted-string">&#39;test&#39;</span><span class="token punctuation">)</span></span><span class="token delimiter punctuation">]</span></span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token class-name return-type">Response</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>You can define the following options for the <code>#[Traceable]</code> attribute:</p><ul><li><code>tracer</code>: The service id of the tracer to use (e.g. <code>open_telemetry.traces.tracers.main</code>) If no tracer is defined, the default tracer will be used.</li></ul>`,14);function k(m,h){const t=o("ExternalLinkIcon");return p(),c("div",null,[i,e("p",null,[n("To trace a specific part of your application, please refer to the documentation of the OpenTelemetry PHP SDK Traces section, "),e("a",u,[n("here"),l(t)]),n(".")]),d])}const g=s(r,[["render",k],["__file","traces.html.vue"]]),f=JSON.parse('{"path":"/instrumentation/traces.html","title":"Traces","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Configuration","slug":"configuration","link":"#configuration","children":[]},{"level":2,"title":"Components","slug":"components","link":"#components","children":[]}],"filePathRelative":"instrumentation/traces.md","git":{"createdTime":1711217451000,"updatedTime":1711386927000,"contributors":[{"name":"Gaël Reyrol","email":"me@gaelreyrol.dev","commits":2}]}}');export{g as comp,f as data};
