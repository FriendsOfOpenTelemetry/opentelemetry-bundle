<?php

namespace GaelReyrol\OpenTelemetryBundle\DependencyInjection;

use Symfony\Component\Config\Definition\Builder\TreeBuilder;
use Symfony\Component\Config\Definition\ConfigurationInterface;

final class Configuration implements ConfigurationInterface
{
    public function getConfigTreeBuilder(): TreeBuilder
    {
        $treeBuilder = new TreeBuilder('open_telemetry');

        /* @phpstan-ignore-next-line */
        $treeBuilder->getRootNode()
            ->addDefaultsIfNotSet()
            ->children()
                ->arrayNode('service')
                    ->children()
                        ->scalarNode('namespace')
                            ->isRequired()
                            ->example('MyOrganization')
                        ->end()
                        ->scalarNode('name')
                            ->isRequired()
                            ->example('MyApp')
                        ->end()
                        ->scalarNode('version')
                            ->isRequired()
                            ->example('1.0.0')
                        ->end()
                        ->scalarNode('environment')
                            ->defaultValue('%kernel.environment%')
                            ->isRequired()
                        ->end()
                    ->end()
                ->end()
                ->arrayNode('traces')
                    ->addDefaultsIfNotSet()
                    ->canBeDisabled()
                    ->children()
                        ->arrayNode('providers')
                            ->arrayPrototype()
                                ->children()
                                    ->enumNode('type')
                                        ->defaultValue('default')
                                        ->values(['noop', 'default', 'traceable'])
                                    ->end()
                                    ->arrayNode('sampler')
                                        ->children()
                                            ->enumNode('type')
                                                ->defaultValue('always-on')
                                                ->values(['always-on', 'parent_based', 'trace_id_ratio'])
                                            ->end()
                                        ->end()
                                    ->end()
                                    ->scalarNode('processor')->isRequired()->end()
                                ->end()
                            ->end()
                        ->end()
                        ->arrayNode('processors')
                            ->arrayPrototype()
                                ->children()
                                    ->enumNode('type')
                                        ->defaultValue('simple')
                                        ->values(['noop', 'simple', 'batch', 'multi'])
                                    ->end()
                                    ->arrayNode('processors')->end()
                                    ->scalarNode('exporter')->end()
                                ->end()
                            ->end()
                        ->end()
                        ->arrayNode('exporters')
                            ->arrayPrototype()
                                ->children()
                                    ->enumNode('type')
                                        ->defaultValue('otlp')
                                        ->values(['in-memory', 'stream', 'otlp', 'grpc', 'zipkin'])
                                        ->isRequired()
                                    ->end()
                                    ->scalarNode('dsn')->isRequired()->end()
                                ->end()
                            ->end()
                        ->end()
                    ->end()
                ->end()
                ->arrayNode('logs')
                    ->addDefaultsIfNotSet()
                    ->canBeDisabled()
                ->end()
                ->arrayNode('metrics')
                    ->addDefaultsIfNotSet()
                    ->canBeDisabled()
                ->end()
            ->end()
        ;

        return $treeBuilder;
    }
}
